import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";

const Home: NextPage<Props> = (props) => {
  // console.log({ props });
  const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1>AWS regions</h1>
        <Regions regions={props.regions} />
        {/* <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>
        <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-2 lg:w-2/3">
          <TechnologyCard
            name="NextJS"
            description="The React framework for production"
            documentation="https://nextjs.org/"
          />
          <TechnologyCard
            name="TypeScript"
            description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
            documentation="https://www.typescriptlang.org/"
          />
          <TechnologyCard
            name="TailwindCSS"
            description="Rapidly build modern websites without ever leaving your HTML"
            documentation="https://tailwindcss.com/"
          />
          <TechnologyCard
            name="tRPC"
            description="End-to-end typesafe APIs made easy"
            documentation="https://trpc.io/"
          />
          <TechnologyCard
            name="Next-Auth"
            description="Authentication for Next.js"
            documentation="https://next-auth.js.org/"
          />
          <TechnologyCard
            name="Prisma"
            description="Build data-driven JavaScript & TypeScript apps in less time"
            documentation="https://www.prisma.io/docs/"
          />
        </div> */}
        <div className="pt-6 text-2xl text-blue-500 flex justify-center items-center w-full">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
      </main>
    </>
  );
};

export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};

import { DescribeRegionsCommand, EC2Client, Region } from "@aws-sdk/client-ec2";
import { useEffect, useState } from "react";

interface Props {
  regions: Region[];
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const c = new EC2Client({});
  const r = await c.send(new DescribeRegionsCommand({}));
  if (r.$metadata.httpStatusCode !== 200) {
    throw new Error(`failed to describe-regions.`);
  }
  if (!r.Regions) {
    throw new Error(`unexpect Regions is missing.`);
  }
  // console.log({ r });

  const props: Props = {
    regions: r.Regions,
  };
  return {
    props,
  };
};

function Regions({ regions }: Props) {
  const [_regions, setRegions] = useState<Props["regions"]>([]);
  useEffect(() => setRegions(regions), [regions]);
  return (
    <>
      <table>
        <tbody>
          {_regions.map((r) => (
            <tr key={r.Endpoint}>
              <td>{r.RegionName}</td>
              <td>{r.Endpoint}</td>
              <td>{r.OptInStatus}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
}
